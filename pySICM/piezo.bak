# Copyright (C) 2014 Patrick Happel <patrick.happel@rub.de>
#
# This file is part of pySICM.
#
# pySICM is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# pySICM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# pySICM. If not, see <http://www.gnu.org/licenses/>.

"Simple classes for controling a single piezo"

import numpy
from pycomedi.channel import AnalogChannel
from pycomedi.subdevice import Subdevice
import pycomedi.constant as CONSTANTS
from pycomedi.utility import Writer, inttrig_insn
import sys
import time as _time
from pylab import *
from scipy import *


class PiezoConfig(object):
    '''Class for configuring a single piezo device.

    Note that pypiezo by from Trevor King might be a better and more sophisticated solution.

    Required parameters:
    ====================

    ao_channel: Channel number on a DAQ-subdevice for analog output of this piezo axis. 
                Alternatively, one can specify a pycomedi.channel object

    Optional parameters:
    ====================
    
    ai_channel: Channel number for reading the analog signal of the current piezo position.
                Default 0. Alternatively, one can specify a pycomedi.channel object
    
    amplification: Factor of the amplification between the signals on AO and AI. Not(!) the 
                amplification of the DAQ's AO signal and the piezo. Default 1.
    
    voltrange: List containing the maximum and minimum voltages for maximum and minimum piezo
                position in arbetrary order (min and max of the list are used). Default [0, 10]
    
    distance: Travel range (in nanometers) of the piezo axis. Default 100000.

    direction: Integer describing the spatial direction of the piezo. Use the properties 
              DIRECTION_X, DIRECTION_Y or DIRECTION_Z. Default DIRECTION_X. Currently not used.

    hardware: Integer indictaing whether the piezo axis controls the pipette or the scanning 
              stage. Use properties HARDWARE_PIPETTE or HARDWARE_STAGE. Default HARDWARE_PIPETTE.
              Currently not used.
    '''
    

    DIRECTION_X = 0
    DIRECTION_Y = 1
    DIRECTION_Z = 2
    
    HARDWARE_PIPETTE = 0
    HARDWARE_STAGE = 1

    _amplification = 1   # between input and output channel
    _distance = 100000   # in nm
    _voltrange  = [0,10] # in Volts
    _ao_channel = 0      # 
    _ai_channel = 0      # Not required
    _direction = 0       # Use constants above
    _hardware = 0        # Use constants above

    _calibration = []
    has_calibration = False

    def __init__ (self, ao_channel, **kwargs):
        self._ao_channel = ao_channel
        for key, value in kwargs.iteritems():
            if (key == 'ai_channel'):
                self._ai_channel = value
            if (key == 'direction'):
                self._direction = value
            if (key == 'hardware'):
                self._hardware = value
            if (key == 'amplification'):
                self._amplification = value
            if (key == 'voltrange'):
                self._voltrange = value
            if (key == 'distance'):
                self._distance = value
        self._deltaVolts = max(self._voltrange)-min(self._voltrange)
                
    def set_calibration(self, cal):
        self._calibration = cal
        self.has_calibration = True

    def nm2volt(self, position):
        '''Translates a given position in nanometers to the corresponding 
        voltage.

        Required parameters:
        ====================
        
        position: Position in nanometers

        Returns:
        ========



        Corresponding voltage
        '''
        if not self.has_calibration:
            return (min(self._voltrange) + position *
                    float(self._deltaVolts)/float(self._distance))
        else:
            return (float(position)-self._calibration[1])/self._calibration[0]
    
    def um2volt(self, distance):
        '''Translates a given position in micrometers to the corresponding 
        voltage.

        Required parameters:
        ====================
        
        position: Position in micrometers

        Returns:
        ========

        Corresponding voltage
        '''

        return self.nm2volts(1000*distance)

    def volt2nm(self, voltage):
        '''Translates a given voltage (in volts) to the corresponding 
        position (in nanometers).

        Required parameters:
        ====================
        
        voltage: Voltage in volts

        Returns:
        ========

        Corresponding position in nanometers
        '''
        if self.has_calibration:
            return float(voltage)*self._config[0] + self._config[1]
        else:
            voltage = float(voltage)/self._amplification
            voltage = voltage - min(self._voltrange)
            return self._distance * voltage/float(self._deltaVolts)

    def volt2um(self,volt):
        '''Translates a given voltage (in volts) to the corresponding 
        position (in micrometers).

        Required parameters:
        ====================
        
        voltage: Voltage in volts

        Returns:
        ========

        Corresponding position in micrometers
        '''

        return self.volt2nm(volt)/1000.0


class PiezoControl(object):
    
    def __init__(self, config, ao, ai):
        self._ao = ao
        self._ai = ai
        self._config = config
        if isinstance(ao, Subdevice):
            self._ao_channel = self._ao.channel(self._config._ao_channel,
                                                factory = AnalogChannel, 
                                                aref = CONSTANTS.AREF.ground)
            best_range = self._ao_channel.find_range(unit=CONSTANTS.UNIT.volt, 
                                                     min = min(self._config._voltrange),
                                                     max = max(self._config._voltrange))
            if (best_range < 0):
                sys.exit('no suitable range found.')
            
                self._ao_channel = self._ao.channel(self._config._ao_channel,
                                                    factory = AnalogChannel, 
                                                    aref = CONSTANTS.AREF.ground,
                                                    range = best_range)
        else:
            self._ao_channel = self._ao
            self._ao = self._ao_channel.subdevice
           
        if isinstance(ai, Subdevice):
            self._ai_channel = self._ai.channel(self._config._ai_channel,
                                                factory = AnalogChannel,
                                                aref=CONSTANTS.AREF.ground)

            best_range = self._ao_channel.find_range(
                unit=CONSTANTS.UNIT.volt, 
                min = (self._config._amplification * 
                       self._config._voltrange),
                max = (self._config._amplification * 
                       max(self._config._voltrange)))

            self._ai_channel = self._ai.channel(self._config._ai_channel,
                                                factory = AnalogChannel,
                                                aref=CONSTANTS.AREF.ground,
                                                range=best_range)
        else:
            self._ai_channel = self._ai
            self._ai = self._ai_channel.subdevice

        _calibration = self._ao.device.parse_calibration('./comedi_calib')
        
        self._ao_converter = self._ao_channel.get_converter(_calibration)
        self._ai_converter = self._ai_channel.get_converter(_calibration)

    def _runWriter(self, data):
        writer = Writer(self._ao, data, 
                        preload=self._ao.get_buffer_size()/data.itemsize,
                        block_while_running=False)
        writer.start()
        self._ao.device.do_insn(inttrig_insn(self._ao))
        writer.join()
        
    def _linear_bits_from_volt(self, start, end):
        bits_start = self._ao_converter.from_physical(start)
        bits_end = self._ao_converter.from_physical(end)
        samples = numpy.absolute(bits_end - bits_start) 
        data = numpy.linspace(bits_start, bits_end, samples)
        values = numpy.zeros((samples, 1), numpy.uint16)
        values[:,0] = [numpy.uint16(round(i)) for i in data]
        return values

    def _wait_for_device(self):
        while self._ao.get_flags().busy and self._ao.get_flags().running:
            _time.sleep(0)            
        self._ao.cancel()

    def _current_bits(self, length=10):
        data=self._ai_channel.data_read_n(length);
        return numpy.mean(data)

    def _current_volts(self, length=10):
        data = self._current_bits(length)
        return (self._ai_converter.to_physical(numpy.mean(data))
                /float(self._config._amplification))

    def _current_volts_quick(self):
        return (self._ai_converter.to_physical(self._ai_channel.data_read())
                /float(self._config._amplification))
        

    def timed_volts_ramp(self, start, end, time):
        values = self._linear_bits_from_volt(start,end)
        samples = len(values[:,0])
        updatefrequency = float(samples)/(float(time)/1000)
        command = self._ao.get_cmd_generic_timed(1,
                                                 1e9/updatefrequency)
        command.stop_src = CONSTANTS.TRIG_SRC.count
        command.stop_arg = samples
        command.chanlist = [self._ao_channel]
#        print(self._ao_channel)
        self._ao.cmd = command
        self._ao.command()
        self._runWriter(values)
    
    def timed_nm_ramp(self, start, end, time):
        self.timed_volts_ramp(self._config.nm2volt(start),
                              self._config.nm2volt(end), time)

    def timed_um_ramp(self, start, end, time):
        self.timed_nm_ramp(1000*start, 1000*end, time)
    
    def set_bit(self, bit):
        self._ao_channel.data_write(bit)

    def set_volt(self, volt):
        bit = self._ao_converter.from_physical(volt)
        self.set_bit(bit)

    def set_nm(self, nm):
        self.set_volt(self._config.nm2volt(nm))

    def volts_ramp(self, start, end, speed):
        '''Outputs a ramp from "start" to "end" with a defined speed.

        Params:
        =======
        start: Start voltage in volt
        end:  End voltage in volt
        speed: Speed in voltages per millisecond
        '''
        if (speed<=0):
            sys.exit('negative or zero speed cannot be processed')
        self.timed_volts_ramp(start, end, numpy.absolute(start-end)/speed)
    
    def nm_ramp(self, start, end, speed):
        '''Outputs a ramp from "start" to "end" with a defined speed.

        Params:
        =======
        start: Start voltage in nanometers
        end:  End voltage in noanometers
        speed: Speed in nm per millisecond
        '''
        self.volts_ramp(self._config.nm2volt(start), self._config.nm2volt(end),
                        self._config.nm2volt(speed))
    def um_ramp(self, start, end, speed):
        '''Outputs a ramp from "start" to "end" with a defined speed.

        Params (required):
        ==================
        start: Start voltage in micrometers
        end:  End voltage in micrometers
        speed: Speed in micrometers per millisecond
        '''
        self.nm_ramp(1000*start, 1000*end, 1000*speed)
    
    def ramp_to_volt_target(self, target, speed):
        '''Outputs a ramp from the current voltage to the specified target voltage.
        
        Params (required):
        ==================
        target: Target voltage (in volts)
        speed: Speed for performing the ramp (in voltages per millisecond)
        '''
        
        self.volts_ramp(self._current_volts(), target, speed)

    def ramp_to_nm_target(self, target, speed):
        '''Outputs a ramp from the current position to the target position
        
        Params (required):
        ==================
        target: Target position in nanometers
        speed: Speed for performing the ramp in nm/ms
        '''
        self.ramp_to_volt_target(self._config.nm2volt(target),
                                 self._config.nm2volt(speed))

    def ramp_to_um_target(self, target,speed):
        '''Outputs a ramp from the current position to the target position
        
        Params (required):
        ==================
        target: Target position in micrometers
        speed: Speed for performing the ramp in micm/ms
        '''
        self.ramp_to_nm_target(1000*target, 1000*speed)

    def ramp_by_volts(self, diff, speed):
        '''Outputs a ramp from the current voltage to the current voltage+diff
        
        Params (required):
        ==================
        diff: Volts to add/substract from the current output
        speed: Speed for performing the ramp in volt/ms
        '''
        
        curr = self._current_volts()
        print("Current: " +str(curr))
        print("Difference: " +str(diff))
        print("Speed: "+ str(speed))
        self.volts_ramp(curr, curr+diff, speed)
        
    def ramp_by_nm(self, diff, speed):
        '''Outputs a ramp from the position to current+diff position
        
        Params (required):
        ==================
        diff: Nanometers to add/substract from the current position
        speed: Speed for performing the ramp in nm/ms
        '''
        
        self.ramp_by_volts(self._config.nm2volt(diff),
                           self._config.nm2volt(speed))


    def ramp_to_nm_target_and_sync(self, target, speed, tolerance = 10):
	'''Ramps to a target (in nanometer) and waits for the 
	piezo to sync.
	
	Params (required):
	==================
	target: Target position in nanometer
	speed: speed in nanometer per millisecond
	
	Params (optional):
	==================
	tolerance: tolerance (in nanometer) for a successful sync
	'''
	self.set_nm(target)
	
	 
	q = 0
	while q == 0:
	    print ("Curr: "+ str(self._config.volt2nm(self._current_volts(100))) +" target "+str(target))
	    print ("numpy.absolute: "+ str(numpy.absolute(self._config.volt2nm(self._current_volts()))))
	    _time.sleep(.5)
	    if (numpy.absolute((self._config.volt2nm(self._current_volts())) - target) < tolerance):
		q = 1
#            self.ramp_to_nm_target(self._config._distance, speed)

    def _run_calibration(self, wait):
        min_volt = numpy.min(self._config._voltrange)
        max_volt = numpy.max(self._config._voltrange)
        
        min_bit = self._ao_converter.from_physical(min_volt)
        max_bit = self._ao_converter.from_physical(max_volt)

        self.set_volt(min_volt)
        _time.sleep(1)
        data = [];
        x = numpy.linspace(min_volt,max_volt, max_bit-min_bit)
        for i in x:
            self.set_volt(i)
            _time.sleep(wait)
            data.append(self._current_volts())
        return x, data

    def calibrate(self):
        x, data = self._run_calibration(0.0001)
        self._config.set_calibration(numpy.polyfit(x,data,1))


    def record_calibration_and_plot(self):
        '''Ramps from theoretical 0 to max deflection and displays the 
        curve. matplotlip is required for plotting.
        '''
        x, data = self._run_calibration(0.0001)
        datanm = [self._config.volt2nm(q) for q in data]
        plot(x,datanm)
        show()

class ZPiezoControl (PiezoControl):
    DECREASE = 0
    INCREASE = 1

    approach_direction = 0

    def __init__(self, config, ao, ai, approachdir):
        if(config._direction != PiezoConfig.DIRECTION_Z):
            config._direction = PiezoConfig.DIRECTION_Z
        self.approach_direction = approachdir;
        super(ZPiezoControl, self).__init__(config, ao, ai)
    
    def approach(self, speed):
        if (self.approach_direction == self.DECREASE):
            self.ramp_to_nm_target(0, speed)
        elif (self.approach_direction == self.INCREASE):
            self.ramp_to_nm_target(self._config._distance, speed)

        
        
        

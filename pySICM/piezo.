# Copyright (C) 2014 Patrick Happel <patrick.happel@rub.de>
#
# This file is part of pySICM.
#
# pySICM is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# pySICM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# pySICM. If not, see <http://www.gnu.org/licenses/>.

"Simple classes for controling a single piezo"

import numpy
import pycomedi.channel as pyChan
import pycomedi.constant as CONSTANTS
import pycomedi.utility as Util
import sys
import time
from twisted.internet import defer, reactor

class PiezoConfig(object):
    '''Class for configuring a single piezo device.

    Note that pypiezo by from Trevor King might be a better and more sophisticated solution.

    Required parameters:
    ====================

    ao_channel: Channel number on a DAQ-subdevice for analog output of this piezo axis

    Optional parameters:
    ====================
    
    ai_channel: Channel number for reading the analog signal of the current piezo position.
                Default 0.
    
    amplification: Factor of the amplification between the signals on AO and AI. Not(!) the 
                amplification of the DAQs AO signal and the piezo. Default 1.
    
    voltrange: List containing the maximum and minimum voltages for maximum and minimum piezo
                position in arbetrary order (min and max of the list are used). Default [0, 10]
    
    distance: Travel range (in nanometers) of the piezo axis. Default 100000.

    direction: Integer describing the spatial direction of the piezo. Use the properties 
              DIRECTION_X, DIRECTION_Y or DIRECTION_Z. Default DIRECTION_X. Currently not used.

    hardware: Integer indictaing whether the piezo axis controls the pipette or the scanning 
              stage. Use properties HARDWARE_PIPETTE or HARDWARE_STAGE. Default HARDWARE_PIPETTE.
              Currently not used.
    '''
    

    DIRECTION_X = 0
    DIRECTION_Y = 1
    DIRECTION_Z = 2
    
    HARDWARE_PIPETTE = 0
    HARDWARE_STAGE = 1

    _amplification = 1   # between input and output channel
    _distance = 100000   # in nm
    _voltrange  = [0,10] # in Volts
    _ao_channel = 0      # 
    _ai_channel = 0      # Not required
    _direction = 0       # Use constants above
    _hardware = 0        # Use constants above

    def __init__ (self, ao_channel, **kwargs):
        print "\n\nAO Channel is: " +str(ao_channel)+"\n\n"
        try:
            self._ao_channel = ao_channel.index
        except:
            self._ao_channel = ao_channel
        
        for key, value in kwargs.iteritems():
            if (key == 'ai_channel'):
                try:
                    self._ai_channel = value.index
                except:
                    self._ai_channel = value
                print "\n\nAI Channel is: " +str(self._ai_channel)+"\n\n"

            if (key == 'direction'):
                self._direction = value
            if (key == 'hardware'):
                self._hardware = value
            if (key == 'amplification'):
                self._amplification = value
            if (key == 'voltrange'):
                self._voltrange = value
            if (key == 'distance'):
                self._distance = value
        self._deltaVolts = max(self._voltrange)-min(self._voltrange)
                
    def nm2volt(self, position):
        '''Translates a given position in nanometers to the corresponding 
        voltage.

        Required parameters:
        ====================
        
        position: Position in nanometers

        Returns:
        ========

        Corresponding voltage
        '''
        return (min(self._voltrange) + position *
                float(self._deltaVolts)/float(self._distance))
    
    def um2volt(self, distance):
        '''Translates a given position in micrometers to the corresponding 
        voltage.

        Required parameters:
        ====================
        
        position: Position in micrometers

        Returns:
        ========

        Corresponding voltage
        '''

        return self.nm2volts(1000*distance)

    def volt2nm(self, voltage, offset = 0):
        '''Translates a given voltage (in volts) to the corresponding 
        position (in nanometers).

        Required parameters:
        ====================
        
        voltage: Voltage in volts

        Returns:
        ========

        Corresponding position in nanometers
        '''

        voltage = float(voltage+offset)/self._amplification
        voltage = voltage - min(self._voltrange)
        return self._distance * voltage/float(self._deltaVolts)

    def volt2um(self,volt):
        '''Translates a given voltage (in volts) to the corresponding 
        position (in micrometers).

        Required parameters:
        ====================
        
        voltage: Voltage in volts

        Returns:
        ========

        Corresponding position in micrometers
        '''

        return self.volt2nm(volt)/1000.0


class PiezoControl(object):
    
    def __init__(self, config, ao, ai, reactor):
        self._ao = ao
        self._ai = ai
        self._config = config
        self.reactor = reactor
        self._ao_channel = self._ao.channel(self._config._ao_channel,
                                            factory = pyChan.AnalogChannel, 
                                            aref = CONSTANTS.AREF.ground)

        best_range = self._ao_channel.find_range(unit=CONSTANTS.UNIT.volt, 
                                                 min = min(self._config._voltrange),
                                                 max = max(self._config._voltrange))
        if (best_range < 0):
            sys.exit('no suitable range found.')
            
        self._ao_channel = self._ao.channel(self._config._ao_channel,
                                            factory = pyChan.AnalogChannel, 
                                            aref = CONSTANTS.AREF.ground,
                                            range = best_range)

        print str(self._config._ai_channel)
        self._ai_channel = self._ai.channel(self._config._ai_channel,
                                            factory = pyChan.AnalogChannel,
                                            aref=CONSTANTS.AREF.ground)

        best_range = self._ao_channel.find_range(unit=CONSTANTS.UNIT.volt, 
                                                 min = (self._config._amplification * 
                                                        min(self._config._voltrange)),
                                                 max = (self._config._amplification * 
                                                        max(self._config._voltrange)))

        self._ai_channel = self._ai.channel(self._config._ai_channel,
                                            factory = pyChan.AnalogChannel,
                                            aref=CONSTANTS.AREF.ground,
                                            range=best_range)

        self._ao_converter = self._ao_channel.get_converter()
        self._ai_converter = self._ai_channel.get_converter()
        self._ao_ramp_cmd = None
        self._ao_ramp_data = None
        self.is_running = 0
     
    def _linear_bits_from_volt(self, start, end):
        bits_start = self._ao_converter.from_physical(start)
        bits_end = self._ao_converter.from_physical(end)
        samples = numpy.absolute(bits_end - bits_start) 
        data = numpy.linspace(bits_start, bits_end, samples)
        values = numpy.zeros((samples, 1), numpy.uint16)
        values[:,0] = [numpy.uint16(round(i)) for i in data]
        return values

    def _wait_for_device(self):
        while self._ao.get_flags().running:
#            print "Waiting for device"
            _time.sleep(0)            
        self._ao.cancel()

    def _current_volts(self, length=10):
        data = self._ai_channel.data_read_n(length)
        return (self._ai_converter.to_physical(numpy.mean(data))
                /float(self._config._amplification))

    def _current_volts_quick(self):
        return (self._ai_converter.to_physical(self._current_bits_quick())
                /float(self._config._amplification))

    def _current_bits_quick(self):
        return self._ai_channel.data_read()

    def _run_ramp(self):
#        print "in _run_Ramp"
        f = self._ao.device.file
#        if len(self._ao_ramp_data) < 10:
#            print "Length of data is only "+str(len(self._ao_ramp_data))
#            print "Maybe I'll hang..."
        if len(self._ao_ramp_data) == 1:
            self.set_bit(self._ao_ramp_data[0])
            time.sleep(float(self._ao_ramp_cmd.scan_begin_arg)*1e-9)
        elif len(self._ao_ramp_data) == 0:
            pass
        else:
            self._ao.cmd = self._ao_ramp_cmd
            self._ao.command_test()
#            if self._ao.get_flags().busy:
#                self.unbusy_device(.01)
#                time.sleep(0.001)
#            print self._ao.cmd
            self._ao.command()
            self._ao_ramp_data.tofile(f)
            f.flush()
            self.is_running = 1

#        run = True
#        while run == True:
#            run = False
#            try:
            self._ao.device.do_insn(Util.inttrig_insn(self._ao))
        #    except:
        #        print "Fehler..."
        #        run = True
        #        time.sleep(0.001)
            t = 0
        # This is blocking the execution...
#            time.sleep(0.00001)

            while self._ao.get_flags().running:
                if t == 0 :
#                    print "waiting for piezo in ramp"
                    t=1
                time.sleep(0.000001)
                
#        print "finished ramp"
        self._ao.cancel()
        self.is_running = 0
        global reactor
#        reacself._stop_thread_and_call_cb)
        if self._ao_ramp_callback is not None:
            
            reactor.callFromThread(self._ao_ramp_callback)

    def isRunning(self):
        return self.is_running == 1

    def timed_volts_ramp(self, start, end, time, callback=None):
        self.prepare_timed_volts_ramp(start, end, time)
        self._ao_ramp_callback = callback
        foo = reactor.callInThread(self._run_ramp)
    def prepare_timed_volts_ramp(self, start, end, time):
#        print "time: " +str(time)
        values = self._linear_bits_from_volt(start,end)
        samples = len(values[:,0])
        updatefrequency = float(samples)/(float(time)/1000)
#        print "Updatefrequency: " + str(updatefrequency)
        if updatefrequency == 0:
            updatefrequency = 1e6
        command = self._ao.get_cmd_generic_timed(1,
                                                 1e9/updatefrequency)
        command.stop_src = CONSTANTS.TRIG_SRC.count
        command.start_src = CONSTANTS.TRIG_SRC.int
        command.stop_arg = samples
        command.chanlist = [self._ao_channel]
        
            
#        self.unbusy_device(.01)
        #        print(self._ao_channel)
        self._ao_ramp_cmd = command 
        self._ao_ramp_data = values

#        if samples > 1:
#            self.threadpool = reactor.getThreadPool()
#            self._run_ramp()

#        elif samples > 0:
#            self.set_bit(values[0])
#            if callback is not None:
#                callback()
#        else:
#            if callback is not None:
#                callback()

#        self._ao.cmd = command
#        self._ao.command()
#        self._runriter(values)
    

    def unbusy_device(self, t):
        if not self._ao.get_flags().busy:
            return
        start = time.time()
        while self._ao.get_flags().busy and time.time() - start < t:
            time.sleep(0.0001)
        
        if self._ao.get_flags().busy:
            self._ao.cancel()
#            print "abgebrochen"
#        print "Habe "+str(time.time() - start)+" Sekunden gewartet"
        
    def _stop_thread_and_call_cb(self):
        if self._ao_ramp_callback is not None:
            self._ao_ramp_callback()
    def timed_nm_ramp(self, start, end, time):
        self.timed_volts_ramp(self._config.nm2volt(start),
                              self._config.nm2volt(end), time)

    def timed_um_ramp(self, start, end, time):
        self.timed_nm_ramp(1000*start, 1000*end, time)
    
    def set_volt(self, volt):
        bit = self._ao_converter.from_physical(volt)
        self.set_bit(bit)

    def set_bit(self, bit):
        self._ao_channel.data_write(bit)


    def set_nm(self, pos):
        self.set_volt(self._config.nm2volt(pos))

    def set_um(self, pos):
        self.set_volt(self._config.nm2volt(1000*pos))


    def volts_ramp(self, start, end, speed, callback = None):
        '''Outputs a ramp from "start" to "end" with a defined speed.

        Params:
        =======
        start: Start voltage in volt
        end:  End voltage in volt
        speed: Speed in voltages per millisecond
        '''
        if (speed<=0):
            sys.exit('negative or zero speed cannot be processed')
        self.timed_volts_ramp(start, end, numpy.absolute(start-end)/speed, callback)
    
    def nm_ramp(self, start, end, speed):
        '''Outputs a ramp from "start" to "end" with a defined speed.

        Params:
        =======
        start: Start voltage in nanometers
        end:  End voltage in nanometers
        speed: Speed in nm per millisecond
        '''
        self.volts_ramp(self._config.nm2volt(start), self._config.nm2volt(end),
                        self._config.nm2volt(speed))
    def um_ramp(self, start, end, speed):
        '''Outputs a ramp from "start" to "end" with a defined speed.

        Params (required):
        ==================
        start: Start voltage in micrometers
        end:  End voltage in micrometers
        speed: Speed in micrometers per millisecond
        '''
        self.nm_ramp(1000*start, 1000*end, 1000*speed)
    
    def ramp_to_volt_target(self, target, speed, callback = None):
        '''Outputs a ramp from the current voltage to the specified target voltage.
        
        Params (required):
        ==================
        target: Target voltage (in volts)
        speed: Speed for performing the ramp (in voltages per millisecond)
        '''
        
        self.volts_ramp(self._current_volts(), target, speed, callback)

    def ramp_to_nm_target(self, target, speed, callback = None):
        '''Outputs a ramp from the current position to the target position
        
        Params (required):
        ==================
        target: Target position in nanometers
        speed: Speed for performing the ramp in nm/ms
        '''
#        print "ramp_to_nm_target"
#        print "-----------------"
#        print "Target (nm): " +str(target)
#        print "Speed (nm/ms): " +str(speed)
#       print "---- end --------"
        self.ramp_to_volt_target(self._config.nm2volt(target),
                                 self._config.nm2volt(speed),
                                 callback)

    def ramp_to_um_target(self, target, speed, callback = None):
        '''Outputs a ramp from the current position to the target position
        
        Params (required):
        ==================
        target: Target position in micrometers
        speed: Speed for performing the ramp in micm/ms
        '''
        self.ramp_to_nm_target(1000*target, 1000*speed, callback)

    def ramp_by_volts(self, diff, speed):
        '''Outputs a ramp from the current voltage to the current voltage+diff
        
        Params (required):
        ==================
        diff: Volts to add/substract from the current output
        speed: Speed for performing the ramp in volt/ms
        '''
        
        curr = self._current_volts()
#        print("Current: " +str(curr))
#        print("Difference: " +str(diff))
#        print("Speed: "+ str(speed))
        self.volts_ramp(curr, curr+diff, speed)
        
    def ramp_by_nm(self, diff, speed):
        '''Outputs a ramp from the position to current+diff position
        
        Params (required):
        ==================
        diff: Nanometers to add/substract from the current position
        speed: Speed for performing the ramp in nm/ms
        '''
        
        self.ramp_by_volts(self._config.nm2volt(diff),
                           self._config.nm2volt(speed))
            

class ZPiezoControl (PiezoControl):
    DECREASE = 0
    INCREASE = 1

    approach_direction = 0

    def __init__(self, config, ao, ai, reactor, approachdir):
        if(config._direction != PiezoConfig.DIRECTION_Z):
            config._direction = PiezoConfig.DIRECTION_Z
        self.approach_direction = approachdir;
        super(ZPiezoControl, self).__init__(config, ao, ai, reactor)
        if (self.approach_direction == self.DECREASE):
            self.set_nm(self._config._distance)
        elif (self.approach_direction == self.INCREASE):
            self.set_nm(0)
    
    def approach(self, speed):
        if (self.approach_direction == self.DECREASE):
            self.ramp_to_nm_target(0, speed)
        elif (self.approach_direction == self.INCREASE):
            self.ramp_to_nm_target(self._config._distance, speed)

    def approach_noThread(self, speed):
        
        #select target position
        if (self.approach_direction == self.DECREASE):
            target = 0
        elif (self.approach_direction == self.INCREASE):
            target = self._config._distance

        self.ramp_to_nm_target_noThread(target, speed)

    def ramp_to_nm_target_noThread(self, target, speed):
        self.ramp_to_volts_noThread(self._config.nm2volt(target),
                                    self._config.nm2volt(speed))

    def ramp_to_volts_noThread(self, target, speed):
        start=self._current_volts()
        self.prepare_timed_volts_ramp(start, target, numpy.absolute(start-target)/float(speed))
        f = self._ao.device.file
        self._ao.cmd = self._ao_ramp_cmd
        self._ao.command_test()
        self._ao.command()
        self._ao_ramp_data.tofile(f)
        f.flush()
        self.is_running = 1
        self._ao.device.do_insn(Util.inttrig_insn(self._ao))
                                      
        


    def approach_and_retract(self, speed, retract_to):
        self._retract_pos = retract_to
        if (self.approach_direction == self.DECREASE):
            self.ramp_to_nm_target(0, speed, self._retract)
        elif (self.approach_direction == self.INCREASE):
            self.ramp_to_nm_target(self._config._distance, speed, self._retract)

    def stop(self):
        self._ao_cancel()
        self.isRunning=0

    def _retract(self):
        self._ao.cancel()
        self.ramp_to_nm_target(self._retract_pos,1000)

    def current_nm(self):
        nm = self._config.volt2nm(self._current_volts())
        print "Current Nanometer: "+str(nm)
        return nm

    def getSignForApproach(self):
        if self.approach_direction == self.DECREASE:
            return -1
        return 1
    
    def getSignForRetract(self):
        return -1 * self.getSignForApproach()
        
    

###
# This is a suggestion for approaching and measuring
#
# inf_curr = numpy.average(ai_channel.read_n(1000))
# zpiezo.approach(speed)
# m = numpy.average(ai.channel.read_n(100))
# while m/inf_curr > threshold and zpiezo.isRunning():
#     m = numpy.average(ai.channel.read_n(100))
# aodevice.cancel()
# zpiezo.set_nm(pos)
